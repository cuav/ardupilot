# hw definition file for processing by chibios_hwdef.py
# for the CUAV Pixhawk6X / CUAV Pixhawk6X IE hardware

# MCU class and specific type. The mcu is H753, and the difference 
# from H743 is that there is no cryptographic processor
MCU STM32H7xx STM32H743xx

# crystal frequency
OSCILLATOR_HZ 16000000

# board ID for firmware load
APJ_BOARD_ID 53

# start on 2th sector (1st sector for bootloader)
FLASH_RESERVE_START_KB 128

# to be compatible with the px4 bootloader we need
# to use a different RAM_MAP
env USE_ALT_RAM_MAP 1

# flash size
FLASH_SIZE_KB 2048

# with 2M flash we can afford to optimize for speed
env OPTIMIZE -O2

# ChibiOS system timer
STM32_ST_USE_TIMER 2

# order of UARTs (and USB)
SERIAL_ORDER OTG1 UART7 UART5 USART1 UART8 USART2 USART3 UART4 OTG2

# default the 2nd interface to MAVLink2
define HAL_OTG2_PROTOCOL SerialProtocol_MAVLink2

# default to all pins low to avoid ESD issues
DEFAULTGPIO OUTPUT LOW PULLDOWN

# USB
PA11 OTG_FS_DM OTG1
PA12 OTG_FS_DP OTG1
PA9 VBUS INPUT OPENDRAIN

# SWD
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD

# TELEM1
PF6 UART7_RX UART7
PE8 UART7_TX UART7
PE10 UART7_CTS UART7
PF8 UART7_RTS UART7

# TELEM2
PD2 UART5_RX UART5
PC12 UART5_TX UART5
PC9 UART5_CTS UART5
PC8 UART5_RTS UART5

# TELEM3
PA3 USART2_RX USART2
PD5 USART2_TX USART2
PD3 USART2_CTS USART2
PD4 USART2_RTS USART2

# GPS1
PB7 USART1_RX USART1
PB6 USART1_TX USART1

# GPS2
PE0 UART8_RX UART8
PE1 UART8_TX UART8

# EXTERNAL2
PH14 UART4_RX UART4
PH13 UART4_TX UART4

# DEBUG
PD9 USART3_RX USART3
PD8 USART3_TX USART3

# IOMCU UART
PC7 USART6_RX USART6
PC6 USART6_TX USART6
IOMCU_UART USART6

# ADC
PA0 SCALED1_V3V3 ADC1 SCALE(2)
PA4 SCALED2_V3V3 ADC1 SCALE(2)
PB0 SCALED3_V3V3 ADC1 SCALE(2)
PF12 SCALED4_V3V3 ADC1 SCALE(2)
PB1 VDD_5V_SENS  ADC1 SCALE(2)
PC2 ADC1_6V6 ADC1 SCALE(2)
PC3 ADC1_3V3 ADC1 SCALE(2)

# SPI1 - ICM20649
PA5 SPI1_SCK SPI1
PG9 SPI1_MISO SPI1
PB5 SPI1_MOSI SPI1
PI9 ICM20649_CS CS
PF2 ICM20649_DRDY INPUT

# SPI2 - ICM42688
PI1 SPI2_SCK SPI2
PI2 SPI2_MISO SPI2
PI3 SPI2_MOSI SPI2
PH5 ICM42688_CS CS
PA10 ICM42688_DRDY INPUT

# SPI3 - BMI088
PC10 SPI3_SCK SPI3
PC11 SPI3_MISO SPI3
PB2  SPI3_MOSI SPI3
PI4 BMI088_A_CS CS
PI8 BMI088_G_CS CS
#PI6 BMI088_ACC_DRDY INPUT
PI7 BMI088_GYRO_DRDY INPUT

# SPI4 (unused)
#PE12 SPI4_SCK SPI4
#PE13 SPI4_MISO SPI4
#PE14 SPI4_MOSI SPI4

# SPI5 - FRAM
PF7 SPI5_SCK SPI5
PH7 SPI5_MISO SPI5
PF11 SPI5_MOSI SPI5
PG7 FRAM_CS CS

# SPI6 - EXTERNAL1 (disabled to save DMA channels)
PB3  SPI6_SCK SPI6
PA6  SPI6_MISO SPI6
PG14 SPI6_MOSI SPI6
PI10 EXTERNAL1_CS1 CS
PA15 EXTERNAL1_CS2 CS
PD11 EXTERNAL1_DRDY1 INPUT GPIO(93)
PD12 EXTERNAL1_DRDY2 INPUT
PF10 EXTERNAL1_nRESET OUTPUT HIGH

# use GPIO(93) for data ready on ADIS16500
define ADIS_DRDY_PIN 93

# PWM output pins
PI0 TIM5_CH4 TIM5 PWM(1) GPIO(50)
PH12 TIM5_CH3 TIM5 PWM(2) GPIO(51)
PH11 TIM5_CH2 TIM5 PWM(3) GPIO(52)
PH10 TIM5_CH1 TIM5 PWM(4) GPIO(53)
PD13 TIM4_CH2 TIM4 PWM(5) GPIO(54)
PD14 TIM4_CH3 TIM4 PWM(6) GPIO(55)
# we need to disable DMA on the last 2 FMU channels
# as timer 12 doesn't have a TIMn_UP DMA option
PH6  TIM12_CH1 TIM12 PWM(7) GPIO(56) NODMA
PH9  TIM12_CH2 TIM12 PWM(8) GPIO(57) NODMA

# CAN1
PD0 CAN1_RX CAN1
PD1 CAN1_TX CAN1

# CAN2
PB12 CAN2_RX CAN2
PB13 CAN2_TX CAN2

# I2C1
PB8 I2C1_SCL I2C1
PB9 I2C1_SDA I2C1

# I2C2
PF1 I2C2_SCL I2C2
PF0 I2C2_SDA I2C2

# I2C3
PA8 I2C3_SCL I2C3
PH8 I2C3_SDA I2C3

# I2C4 (internal)
PF14 I2C4_SCL I2C4
PF15 I2C4_SDA I2C4

# order of I2C buses
I2C_ORDER I2C4 I2C1 I2C2 I2C3

# by default assume first I2C bus is internal
define HAL_I2C_INTERNAL_MASK 1

# heater
PB10 HEATER_EN OUTPUT LOW GPIO(79)
define HAL_HEATER_GPIO_PIN 79

# armed indication
PE6 nARMED OUTPUT HIGH

# power enable pins
PC13 VDD_3V3_SD_CARD_EN OUTPUT HIGH
PI11 VDD_3V3_SENSORS1_EN OUTPUT HIGH
PF4  VDD_3V3_SENSORS2_EN OUTPUT HIGH
PE7  VDD_3V3_SENSORS3_EN OUTPUT HIGH
PG8  VDD_3V3_SENSORS4_EN OUTPUT HIGH
PG15 ETH_PWR_EN OUTPUT LOW

# start peripheral power off, then enable after init
# this prevents a problem with radios that use RTS for
# bootloader hold
PG10 nVDD_5V_HIPOWER_EN OUTPUT HIGH
PG4  nVDD_5V_PERIPH_EN OUTPUT HIGH

# Control of Spektrum power pin
PH2 SPEKTRUM_PWR OUTPUT HIGH GPIO(42)
define HAL_GPIO_SPEKTRUM_PWR 42

# Spektrum Power is Active High
define HAL_SPEKTRUM_PWR_ENABLED 1

# power sensing
PE15 VDD_5V_PERIPH_nOC INPUT PULLUP
PF13 VDD_5V_HIPOWER_nOC INPUT PULLUP
PG1 VDD_BRICK_nVALID INPUT PULLUP
PG2 VDD_BRICK2_nVALID INPUT PULLUP
PG3 VDD_BRICK3_nVALID INPUT PULLUP

# microSD support
PD6 SDMMC2_CK SDMMC2
PD7 SDMMC2_CMD SDMMC2
PB14 SDMMC2_D0 SDMMC2
PB15 SDMMC2_D1 SDMMC2
PG11 SDMMC2_D2 SDMMC2
PB4  SDMMC2_D3 SDMMC2
define FATFS_HAL_DEVICE SDCD2

# safety
PD10 LED_SAFETY OUTPUT
PF5 SAFETY_IN INPUT PULLDOWN

# LEDs
PE3 LED_RED OUTPUT OPENDRAIN HIGH GPIO(2)
PE4 LED_GREEN OUTPUT OPENDRAIN HIGH GPIO(3)
PE5 LED_BLUE OUTPUT OPENDRAIN HIGH GPIO(4)

# setup for BoardLED2
define HAL_GPIO_A_LED_PIN 2
define HAL_GPIO_B_LED_PIN 3
define HAL_GPIO_C_LED_PIN 4
define HAL_GPIO_LED_ON 0

# use pixracer style 3-LED indicators
define HAL_HAVE_PIXRACER_LED

# ID pins
PG0 HW_VER_REV_DRIVE OUTPUT LOW
#PH4 HW_REV_SENS ADC3 SCALE(1)
#PH3 HW_VER_SENS ADC3 SCALE(1)

# PWM output for buzzer
PF9 TIM14_CH1 TIM14 GPIO(27) ALARM

# GPIOs
PE11 FMU_CAP1 INPUT GPIO(74)
PC0 NFC_GPIO INPUT GPIO(32)
PE9 GPIO_SPIX_SYNC INPUT

# RC input
PI5 TIM8_CH1 TIM8 RCININT PULLDOWN LOW

# barometers
BARO ICP201XX I2C:0:0x64
BARO ICP201XX I2C:2:0x63

# compass
define HAL_PROBE_EXTERNAL_I2C_COMPASSES
COMPASS IST8310 I2C:ALL_EXTERNAL:0x0E true  ROTATION_ROLL_180_YAW_90
COMPASS RM3100 I2C:0:0x20 false ROTATION_ROLL_180_YAW_270

#COMPASS RM3100 I2C:0:0x20 false ROTATION_PITCH_180

# SPI devices
SPIDEV icm20649       SPI1 DEVID1  ICM20649_CS     MODE3  2*MHZ  8*MHZ
SPIDEV icm42688       SPI2 DEVID1  ICM42688_CS     MODE3  2*MHZ  8*MHZ
SPIDEV bmi088_a       SPI3 DEVID1  BMI088_A_CS     MODE3  10*MHZ 10*MHZ
SPIDEV bmi088_g       SPI3 DEVID2  BMI088_G_CS     MODE3  10*MHZ 10*MHZ
SPIDEV ramtron        SPI5 DEVID1  FRAM_CS         MODE3  8*MHZ  8*MHZ
SPIDEV adis16500      SPI6 DEVID1  EXTERNAL1_CS1   MODE3  1*MHZ  2*MHZ

# 3 IMUs
IMU ADIS1647x SPI:adis16500 ROTATION_YAW_270 ADIS_DRDY_PIN
IMU Invensensev3 SPI:icm42688 ROTATION_ROLL_180
IMU BMI088 SPI:bmi088_a SPI:bmi088_g ROTATION_ROLL_180_YAW_270
IMU Invensensev2 SPI:icm20649 ROTATION_ROLL_180_YAW_90

#IMU Invensensev3 SPI:icm42688 ROTATION_ROLL_180_YAW_270
#IMU BMI088 SPI:bmi088_a SPI:bmi088_g ROTATION_PITCH_180
#IMU Invensensev2 SPI:icm20649_2 ROTATION_ROLL_180

define HAL_DEFAULT_INS_FAST_SAMPLE 15

# enable RAMTROM parameter storage
define HAL_STORAGE_SIZE 32768
define HAL_WITH_RAMTRON 1

# allow to have have a dedicated safety switch pin
define HAL_HAVE_SAFETY_SWITCH 1

DMA_PRIORITY SDMMC* USART6* ADC* UART* USART* SPI* TIM*

# enable FAT filesystem support (needs a microSD defined via SDMMC)
define HAL_OS_FATFS_IO 1

# Now some defines for logging and terrain data files.
define HAL_BOARD_LOG_DIRECTORY "/APM/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/APM/TERRAIN"

# List of files to put in ROMFS. For Pixhawk6X we need an IO firmware so
# we can automatically update the IOMCU firmware on boot. The format
# is "ROMFS ROMFS-filename source-filename". Paths are relative to the
# ardupilot root.
ROMFS io_firmware.bin Tools/IO_Firmware/iofirmware_lowpolh.bin
